version: 2.1

orbs:
  node: circleci/node@5.0.1

workflows:
  version: 2

  test-build:
    jobs:
      - test-server
      - lint
      - get-version

      # - build-viewer:
      #     # built the npm package
      #     requires:
      #       - lint
      #     filters: &filters-build
      #       tags:
      #         only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      #       branches:
      #         only:
      #           # - main

      #         requires:
      #           # the result of objectloader build can be mounted here from workspace
      #           - npm_build_object_loader

      - docker-build-and-publish-server:
          context: &docker-hub-context
            - docker-hub
          filters: &filters-build
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              only:
                - main
                - gergo/CIRewrite
          requires:
            - lint
            - test-server
            - get-version

      - docker-build-and-publish-frontend:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - lint
            - get-version

      - docker-build-and-publish-webhooks:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - lint
            - get-version
            - test-server

      - docker-build-and-publish-file-imports:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - lint
            - get-version
            - test-server

      - docker-build-and-publish-previews:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - lint
            - get-version
            - test-server

      - docker-build-and-publish-test-container:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - lint
            - get-version
            - test-server

      - publish-helm-chart:
          filters: *filters-build
          requires:
            - lint
            - test-server
            - get-version
            - docker-build-and-publish-server
            - docker-build-and-publish-frontend
            - docker-build-and-publish-webhooks
            - docker-build-and-publish-file-imports
            - docker-build-and-publish-previews
            - docker-build-and-publish-test-container

      - publish-npm:
          filters: *filters-build
          requires:
            - lint

jobs:
  lint:
    docker: &docker-image
      - image: cimg/python:3.9-node
    steps:
      - checkout
      - run: node --version

  get-version:
    docker: *docker-image
    working_directory: /tmp/ci
    steps:
      - checkout
      - run: pwd
      - run: mkdir -p workspace
      - run:
          name: set version
          command: |
            SPECKLE_VERSION=$(./.circleci/get_version.sh)
            echo "export SPECKLE_VERSION=$SPECKLE_VERSION" >> workspace/env-vars
      # - run:
      #     name: set var
      #     command: echo "export BAZ=baz.`date +%Y%m%d.%H%M`" >> $BASH_ENV
      # - run: echo "$BAZ"
      # - run: echo "export FOO=foo.`date +%Y%m%d.%H%M%S`" >>workspace/new-env-vars
      # - run: echo "export BOB=$BAZ" >> workspace/new-env-vars
      - run: cat workspace/env-vars >> $BASH_ENV
      # - run: echo ${FOO:-NULL}
      # - run: echo ${BAZ:-NULL}
      # - run: echo ${BOB:-NULL}
      - run: echo $SPECKLE_VERSION
      - persist_to_workspace:
          root: workspace
          paths:
              - env-vars


  test-server:
    docker:
      - image: cimg/node:lts
      - image: cimg/redis:6.2.6
      - image: 'cimg/postgres:12.8'
        environment:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
    environment:
      NODE_ENV: test
      DATABASE_URL: 'postgres://speckle:speckle@localhost:5432/speckle2_test'
      PGDATABASE: speckle2_test
      PGUSER: speckle
      SESSION_SECRET: 'keyboard cat'
      STRATEGY_LOCAL: 'true'
      CANONICAL_URL: 'http://localhost:3000'
    steps:
      - checkout
      - node/install-packages:
          app-dir: ~/project/packages/server
      - run: 'dockerize -wait tcp://localhost:5432 -timeout 1m'

      - run:
          command: npm run test:report
          working_directory: 'packages/server'

      - run:
          command: 'bash <(curl -s https://codecov.io/bash)'
          working_directory: 'packages/server'

      - store_test_results:
          path: packages/server/reports

      - store_artifacts:
          path: packages/server/coverage/lcov-report
          destination: package/server/coverage

  build-viewer:
    docker: *docker-image
    steps:
      - checkout
      - run:
          command: npm install ../objectloader
          working_directory: 'packages/viewer'
      - node/install-packages:
          app-dir: ~/project/packages/viewer
      - run:
          command: npm run build
          working_directory: 'packages/viewer'

  docker-build-and-publish: &docker-job
    docker: *docker-image
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Publish
          command: ./.circleci/build.sh

  docker-build-and-publish-server:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: server

  docker-build-and-publish-frontend:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: frontend

  docker-build-and-publish-previews:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: preview-service

  docker-build-and-publish-webhooks:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: webhook-service

  docker-build-and-publish-file-imports:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: fileimport-service

  docker-build-and-publish-test-container:
    <<: *docker-job
    environment:
      FOLDER: utils
      SPECKLE_SERVER_PACKAGE: test-deployment

  publish-npm:
    docker: *docker-image
    # context:
    #   - npm_registry
    steps:
      - checkout
      - run: node --version

  publish-helm-chart:
    docker: *docker-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '18:74:c4:b9:dc:66:b2:66:1d:81:56:0d:0a:87:9b:b1'
      - run:
          name: Publish Helm Chart
          command: ./.circleci/publish_helm_chart.sh
